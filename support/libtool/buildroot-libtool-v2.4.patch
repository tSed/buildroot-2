--- a/ltmain.sh
+++ b/ltmain.sh
@@ -398,6 +398,9 @@ case $progpath in
      ;;
 esac
 
+# Assume libtool script is loacted at the root of the buoild directory
+top_builddir="$progdir"
+
 # Sed substitution that helps us do robust quoting.  It backslashifies
 # metacharacters that are still active within double-quoted strings.
 Xsed="${SED}"' -e 1s/^X//'
@@ -1416,8 +1416,8 @@
 	# was found and let the user know that the "--tag" command
 	# line option must be used.
 	if test -z "$tagname"; then
-	  func_echo "unable to infer tagged configuration"
-	  func_fatal_error "specify a tag with \`--tag'"
+	  func_echo "defaulting to \`CC'"
+	  func_echo "if this is not correct, specify a tag with \`--tag'"
 #	else
 #	  func_verbose "using $tagname tagged configuration"
 	fi
@@ -2962,8 +2962,11 @@
 	  # At present, this check doesn't affect windows .dll's that
 	  # are installed into $libdir/../bin (currently, that works fine)
 	  # but it's something to keep an eye on.
-	  test "$inst_prefix_dir" = "$destdir" && \
-	    func_fatal_error "error: cannot install \`$file' to a directory not ending in $libdir"
+	  #
+	  # This breaks install into our staging area.  -PB
+	  #
+	  # test "$inst_prefix_dir" = "$destdir" && \
+	  #   func_fatal_error "error: cannot install \`$file' to a directory not ending in $libdir"
 
 	  if test -n "$inst_prefix_dir"; then
 	    # Stick the inst_prefix_dir data into the link command.
@@ -6683,7 +6686,7 @@
 	  *)
 	    if test "$installed" = no; then
 	      func_append notinst_deplibs " $lib"
-	      need_relink=yes
+	      need_relink=no
 	    fi
 	    ;;
 	  esac
@@ -8030,6 +8033,11 @@ EOF
 	  rpath="$finalize_rpath"
 	  test "$opt_mode" != relink && rpath="$compile_rpath$rpath"
 	  for libdir in $rpath; do
+	    # for rpath, skip any libdir pointing to the build directory
+	    case "$libdir" in
+	    "$top_builddir"*|"./"*|"../"*|*"/usr/$target_alias/lib"*|*"/usr/$host_alias/lib"*) continue ;;
+	    *) ;;
+	    esac
 	    if test -n "$hardcode_libdir_flag_spec"; then
 	      if test -n "$hardcode_libdir_separator"; then
 		func_replace_sysroot "$libdir"
@@ -8765,6 +8773,11 @@ EOF
       rpath=
       hardcode_libdirs=
       for libdir in $compile_rpath $finalize_rpath; do
+	# for rpath, skip any libdir pointing to the build directory
+	case "$libdir" in
+	"$top_builddir"*|"./"*|"../"*|*"/usr/$target_alias/lib"*|*"/usr/$host_target/lib"*) continue ;;
+	*) ;;
+	esac
 	if test -n "$hardcode_libdir_flag_spec"; then
 	  if test -n "$hardcode_libdir_separator"; then
 	    if test -z "$hardcode_libdirs"; then
@@ -8816,6 +8829,11 @@ EOF
       rpath=
       hardcode_libdirs=
       for libdir in $finalize_rpath; do
+	# for rpath, skip any libdir pointing to the build directory
+	case "$libdir" in
+	"$top_builddir"*|"./"*|"../"*|*"/usr/$target_alias/lib"*|*"/usr/$host_alias/lib"*) continue ;;
+	*) ;;
+	esac
 	if test -n "$hardcode_libdir_flag_spec"; then
 	  if test -n "$hardcode_libdir_separator"; then
 	    if test -z "$hardcode_libdirs"; then
@@ -9257,6 +9260,10 @@
 	    # Replace all uninstalled libtool libraries with the installed ones
 	    newdependency_libs=
 	    for deplib in $dependency_libs; do
+              # Replacing uninstalled with installed can easily break crosscompilation,
+              # since the installed path is generally the wrong architecture.  -CL
+              newdependency_libs="$newdependency_libs $deplib"
+              continue
 	      case $deplib in
 	      *.la)
 		func_basename "$deplib"
